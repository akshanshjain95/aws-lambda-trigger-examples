package com.knoldus.aws.lambdawithdynamodbstreams;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.DynamodbEvent;
import com.knoldus.aws.utils.confighelper.ConfigReader;
import com.knoldus.aws.utils.loggerhelper.LoggerFactory;
import com.knoldus.aws.utils.loggerhelper.LoggerService;
import com.knoldus.aws.utils.mailhelper.MailerHelper;

import java.util.List;
import java.util.stream.Collectors;

public class LambdaWithDynamoDbStreams implements RequestHandler<DynamodbEvent, Void> {

	private static final LoggerService LOGGER = LoggerFactory.getLogService(LambdaWithDynamoDbStreams.class.getName());
	private static final ConfigReader configReader = ConfigReader.getConfigReader("mail");

	/**
	 * Handler function for handling DynamoDB Events generated by an action over a DynamoDB table
	 * linked with this lambda function. This lambda function needs CloudWatch permissions as it
	 * takes the records through <code>{@link DynamodbEvent}</code> triggering this lambda,
	 * constructs a {@code String} and logs it on CloudWatch.
	 *
	 * @param dynamodbEvent Event that triggers this lambda function.
	 * @param context Used to access lambda environment information.
	 * @return Void
	 */
	@Override
	public Void handleRequest(DynamodbEvent dynamodbEvent, Context context) {
		List<DynamodbEvent.DynamodbStreamRecord> records = dynamodbEvent.getRecords();

		String resultString =
				records.stream()
						.map(record -> "Record: " + record.getDynamodb().getNewImage())
						.collect(Collectors.joining("\n"));

		String to = configReader.getProperty("to");
		String subject = "Lambda triggered due to DynamoDB Streams";

		String body = String.join(
				System.getProperty("line.separator"),
				"<h2>Your lambda was triggered due to DynamoDB Streams</h2>",
				"<p>The record for dynamodb streams is -",
				"<p>" + resultString + "</p>"
		);

		try {
			MailerHelper.sendMail(to, subject, body);
			LOGGER.info("Records in DynamoDB --> " + resultString);
		} catch (Exception ex) {
			LOGGER.info(ex.getMessage());
		}

		return null;
	}
}
