package com.knoldus.aws.lambdawithsns;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.SNSEvent;
import com.knoldus.aws.utils.confighelper.ConfigReader;
import com.knoldus.aws.utils.loggerhelper.LoggerFactory;
import com.knoldus.aws.utils.loggerhelper.LoggerService;
import com.knoldus.aws.utils.mailhelper.MailerHelper;

import java.util.List;
import java.util.stream.Collectors;

public class LambdaWithSNS implements RequestHandler<SNSEvent, Void> {

    private static final LoggerService LOGGER = LoggerFactory.getLogService(LambdaWithSNS.class.getName());
    private static final ConfigReader configReader = ConfigReader.getConfigReader("mail");

	/**
	 * Handler function for handling SNS Events generated by an action on SNS, for example
	 * publishing a message to a created topic on SNS, linked with this lambda function.
	 * This lambda function needs CloudWatch permissions as it takes the records
	 * through <code>{@link SNSEvent}</code> triggering this lambda, constructs
	 * a {@code String} and logs it on CloudWatch.
	 *
	 * @param snsEvent Event that triggers this lambda function.
	 * @param context Used to access lambda environment information.
	 * @return Void
	 */
	@Override
	public Void handleRequest(SNSEvent snsEvent, Context context) {
		List<SNSEvent.SNSRecord> records = snsEvent.getRecords();

		String finalRecordsString =
				records.stream()
						.map(SNSEvent.SNSRecord::toString)
						.collect(Collectors.joining("\n"));

        String to = configReader.getProperty("to");
        String subject = "Lambda triggered due to SNS";

        String body = String.join(
                System.getProperty("line.separator"),
                "<h2>Your lambda was triggered due to SNS</h2>",
                "<p>The record in SNS -",
                "<p>" + finalRecordsString + "</p>"
        );

		try {
			MailerHelper.sendMail(to, subject, body);
            LOGGER.info("SNS Record --> " + finalRecordsString);
		} catch (Exception ex) {
            LOGGER.info(ex.getMessage());
		}

		return null;
	}
}
